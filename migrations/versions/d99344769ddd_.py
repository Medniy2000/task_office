"""empty message

Revision ID: d99344769ddd
Revises: 
Create Date: 2020-03-28 18:44:56.147877

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "d99344769ddd"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", postgresql.UUID(), nullable=False),
        sa.Column("meta", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("username", sa.String(length=80), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("bio", sa.String(length=300), nullable=True),
        sa.Column("phone", sa.String(length=300), nullable=True),
        sa.Column("password", sa.Binary(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("is_superuser", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id", "uuid"),
        sa.UniqueConstraint("username"),
        sa.UniqueConstraint("uuid"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_table(
        "boards",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", postgresql.UUID(), nullable=False),
        sa.Column("meta", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.Column("owner_uuid", postgresql.UUID(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(["owner_uuid"], ["users.uuid"]),
        sa.PrimaryKeyConstraint("id", "uuid"),
        sa.UniqueConstraint("name", "owner_uuid", name="unique_name_owner_board"),
        sa.UniqueConstraint("uuid"),
    )
    op.create_index(
        op.f("ix_boards_description"), "boards", ["description"], unique=False
    )
    op.create_table(
        "columns",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", postgresql.UUID(), nullable=False),
        sa.Column("meta", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("name", sa.String(length=120), nullable=False),
        sa.Column("position", sa.Integer(), nullable=True),
        sa.Column("board_uuid", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["board_uuid"], ["boards.uuid"]),
        sa.PrimaryKeyConstraint("id", "uuid"),
        sa.UniqueConstraint(
            "board_uuid", "name", name="unique_board__board_column_name"
        ),
        sa.UniqueConstraint("uuid"),
    )
    op.create_table(
        "permissions",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", postgresql.UUID(), nullable=False),
        sa.Column("meta", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("role", sa.Integer(), nullable=True),
        sa.Column("user_uuid", postgresql.UUID(), nullable=False),
        sa.Column("board_uuid", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["board_uuid"], ["boards.uuid"]),
        sa.ForeignKeyConstraint(["user_uuid"], ["users.uuid"]),
        sa.PrimaryKeyConstraint("id", "uuid"),
        sa.UniqueConstraint(
            "board_uuid", "user_uuid", name="unique_board_owner_permission"
        ),
        sa.UniqueConstraint("uuid"),
    )
    op.create_table(
        "tasks",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", postgresql.UUID(), nullable=False),
        sa.Column("meta", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("expire_at", sa.DateTime(), nullable=True),
        sa.Column("label", sa.String(length=80), nullable=True),
        sa.Column("name", sa.String(length=120), nullable=False),
        sa.Column("description", sa.String(length=120), nullable=False),
        sa.Column("state", sa.Integer(), nullable=True),
        sa.Column("position", sa.Integer(), nullable=True),
        sa.Column("column_uuid", postgresql.UUID(), nullable=False),
        sa.Column("creator_uuid", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["column_uuid"], ["columns.uuid"]),
        sa.ForeignKeyConstraint(["creator_uuid"], ["users.uuid"]),
        sa.PrimaryKeyConstraint("id", "uuid"),
        sa.UniqueConstraint("uuid"),
    )
    op.create_table(
        "users_tasks",
        sa.Column("task_uuid", postgresql.UUID(), nullable=False),
        sa.Column("user_uuid", postgresql.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["task_uuid"], ["tasks.uuid"]),
        sa.ForeignKeyConstraint(["user_uuid"], ["users.uuid"]),
        sa.PrimaryKeyConstraint("task_uuid", "user_uuid"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users_tasks")
    op.drop_table("tasks")
    op.drop_table("permissions")
    op.drop_table("columns")
    op.drop_index(op.f("ix_boards_description"), table_name="boards")
    op.drop_table("boards")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
